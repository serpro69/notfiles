#!/bin/sh
#
# vim: set ft=sh:
#
# File: .exports
# Description:
#   contains exports defined by the user.
#   Separated from shell rc files for portability between different machines.
#   Avoid syntax and commands not portable to other different setups,
#   check out http://hyperpolyglot.org/unix-shells for more information

exists() { command -p -v &>/dev/null }
is_zsh() { [ -n "$ZSH_VERSION" ] }
is_darwin() { [ $(uname) = Darwin ] }

# Helper function to remove one or more path components from a PATH string.
_remove_path_entry() {
  local entries_to_remove_str="$1"
  local current_path_input="$2"
  local new_path_intermediate="$current_path_input"

  local single_entry_to_remove
  # Append a colon to entries_to_remove_str if it's not empty, to simplify loop logic
  local remaining_entries_to_remove="${entries_to_remove_str:+$entries_to_remove_str:}"

  while [ -n "$remaining_entries_to_remove" ]; do
    single_entry_to_remove="${remaining_entries_to_remove%%:*}" # Get part before first colon
    remaining_entries_to_remove="${remaining_entries_to_remove#*:}" # Get part after first colon

    if [ -z "$single_entry_to_remove" ]; then
      continue
    fi

    local temp_path_after_single_removal=""
    local current_path_segment=""
    # Append a colon to new_path_intermediate if it's not empty, to simplify loop logic
    local remaining_path_segments="${new_path_intermediate:+$new_path_intermediate:}"

    while [ -n "$remaining_path_segments" ]; do
      current_path_segment="${remaining_path_segments%%:*}"
      remaining_path_segments="${remaining_path_segments#*:}"

      if [ -n "$current_path_segment" ]; then # Process only non-empty segments
        if [ "$current_path_segment" != "$single_entry_to_remove" ]; then
          if [ -z "$temp_path_after_single_removal" ]; then
            temp_path_after_single_removal="$current_path_segment"
          else
            temp_path_after_single_removal="$temp_path_after_single_removal:$current_path_segment"
          fi
        fi
      elif [ -z "$temp_path_after_single_removal" ] && [ -z "$remaining_path_segments" ]; then
         # Path was/became empty, keeping result empty.
         : # No-op, temp_path_after_single_removal remains empty
      fi
    done
    new_path_intermediate="$temp_path_after_single_removal"
  done

  echo "$new_path_intermediate" # This is the ONLY echo to stdout, sending the new PATH back
}

_prepend_path() {
  local target_path="$1"

  if [ -z "$target_path" ]; then
    return 1
  fi

  if [ -n "${IN_NIX_SHELL-}" ]; then
    PATH=$(_remove_path_entry "$target_path" "$PATH")
  else
    # split target path into individual components
    for entry in $(echo "$target_path" | tr ':' ' '); do
      # remove leading/trailing whitespace from each entry
      entry=$(echo "$entry" | xargs)
      if [ -n "$entry" ] && [[ ":$PATH:" != *":${entry}:"* ]]; then
        if [ -z "$PATH" ]; then
          PATH="$entry"
        else
          PATH="${target_path}:$PATH"
        fi
      fi
    done
  fi
  export PATH
}

_append_path() {
  local target_path="$1"

  if [ -z "$target_path" ]; then
    return 1
  fi

  if [ -n "${IN_NIX_SHELL-}" ]; then
    PATH=$(_remove_path_entry "$target_path" "$PATH")
  else
    # split target path into individual components
    for entry in $(echo "$target_path" | tr ':' ' '); do
      # remove leading/trailing whitespace from each entry
      entry=$(echo "$entry" | xargs)
      if [ -n "$entry" ] && [[ ":$PATH:" != *":${entry}:"* ]]; then
        if [ -z "$PATH" ]; then
          PATH="$entry"
        else
          PATH="$PATH:${target_path}"
        fi
      fi
    done
  fi
  export PATH
}

export DIR_DOTFILES=$(pwd);

# make less the default pager
export PAGER=${PAGER:-"less"}

# use sublime text for local changes
if [[ -n $SSH_CONNECTION ]]; then
  EDITOR=${EDITOR:-"vim"}
else
  if which subl >/dev/null 2>&1; then
    EDITOR="subl"
  else
    EDITOR=${EDITOR:-"vim"}
  fi
fi
export EDITOR
export VISUAL=$EDITOR

PREVIEW="less"
[ -s /usr/bin/gloobus-preview ] && PREVIEW="gloobus-preview"
[ -s /Applications/Preview.app ] && PREVIEW="/Applications/Preview.app"
export PREVIEW

# detect your os
case "$OSTYPE" in
  solaris*) SYSTEM_TYPE="SOLARIS" ;;
  darwin*)  SYSTEM_TYPE="OSX" ;;
  linux*)   SYSTEM_TYPE="LINUX" ;;
  bsd*)     SYSTEM_TYPE="BSD" ;;
  msys*)    SYSTEM_TYPE="MINGW" ;;
  cygwin*)  SYSTEM_TYPE="CYGWIN" ;;
esac

if [[ "$(uname)" == "Darwin" ]]; then
  SYSTEM_TYPE="OSX"
elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
  SYSTEM_TYPE="LINUX"
elif [[ "$(expr substr $(uname -s) 1 7)" == "FreeBSD" ]]; then
  SYSTEM_TYPE="FREE_BSD"
elif [[ "$(expr substr $(uname -s) 1 6)" == "NetBSD" ]]; then
  SYSTEM_TYPE="NET_BSD"
elif [[ "$(expr substr $(uname -s) 1 7)" == "OpenBSD" ]]; then
  SYSTEM_TYPE="OPEN_BSD"
elif [[ "$(expr substr $(uname -s) 1 7)" == "MSYS_NT" ]]; then
  SYSTEM_TYPE="MINGW"
elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
  SYSTEM_TYPE="MINGW"
elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]]; then
  SYSTEM_TYPE="MINGW"
elif [[ "$(expr substr $(uname -s) 1 9)" == "CYGWIN_NT" ]]; then
  SYSTEM_TYPE="CYGWIN"
fi

if [[ -z $SYSTEM_TYPE ]] && [[ "$(< /proc/version)" == *"Microsoft"* ]]; then
  SYSTEM_TYPE="Win10_Linux"
fi

export SYSTEM_TYPE

if which brew >/dev/null 2>&1; then
  INSTALL_TYPE="BREW"
fi

if which apt-get >/dev/null 2>&1; then
  INSTALL_TYPE="APT"
fi

if which yum >/dev/null 2>&1; then
  INSTALL_TYPE="YUM"
fi

export INSTALL_TYPE

# don't check mail when opening terminal.
#unset MAILCHECK

# prompt (bash)
GIT_PROMPT_ONLY_IN_REPO=${GIT_PROMPT_ONLY_IN_REPO:-1}
GIT_PROMPT_FETCH_REMOTE_STATUS=${GIT_PROMPT_FETCH_REMOTE_STATUS:-0} # uncomment to avoid fetching remote status
GIT_PROMPT_SHOW_UNTRACKED_FILES=${GIT_PROMPT_SHOW_UNTRACKED_FILES:-"all"} # can be no, normal or all; determines counting of untracked files
# GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
# GIT_PROMPT_STATUS_COMMAND="gitstatus_pre-1.7.10.sh" # uncomment to support Git older than 1.7.10
# GIT_PROMPT_START="..."    # uncomment for custom prompt start sequence
# GIT_PROMPT_END="..."      # uncomment for custom prompt end sequence
# GIT_PROMPT_THEME="Custom" # use custom .git-prompt-colors.sh
GIT_PROMPT_THEME=${GIT_PROMPT_THEME:-"spaceship"} # use theme

# make the "sudo" prompt more useful, without requiring access to "visudo"
export SUDO_PROMPT=${SUDO_PROMPT:-"[sudo] password for %u on %h: "}

# PATH addons
if [ -d "$HOME/bin" ]; then
   _prepend_path "$HOME/bin"
fi

if which ruby >/dev/null 2>&1 && which gem >/dev/null 2>&1; then
  _append_path "$(ruby -rrubygems -e 'puts Gem.user_dir')/bin"
fi

_prepend_path "/usr/local/bin:/usr/sbin:/sbin:/usr/local/sbin"

if [ -d "/usr/local/man" ]; then
  MANPATH="/usr/local/man:$MANPATH"
fi

if [ -d "/usr/local/mysql/man" ]; then
  MANPATH="/usr/local/man:$MANPATH"
fi

if [ -d "/usr/local/git/man" ]; then
  MANPATH="/usr/local/git/man:$MANPATH"
fi

export MANPATH

# larger bash history (allow 2^32 entries)
# see also https://unix.stackexchange.com/questions/273861/unlimited-history-in-zsh
export HISTSIZE=4294967296 # resize history size
export HISTFILESIZE=$HISTSIZE
# larger bash history (allow 32^3*2 entries)
export SAVEHIST=65536

# ignore duplicates commands in the historylog
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups

# make some commands not show up in history
export HISTIGNORE=${HISTIGNORE:-"shutdown*:halt*:poweroff*:hibernate*:rm -rf*"}

# ignorespace	| don't save lines which begin with a <space> character
# ignoredups	| don't save lines matching the previous history entry
# ignoreboth	| use both 'ignorespace' and 'ignoredups'
# erasedups	  | eliminate duplicates across the whole history

# add the date to the historylog
#
# Keep track of the time the commands were executed.
# The xterm colour escapes require special care when piping; e.g. "| less -R".
#export HISTTIMEFORMAT=$(echo -e "${COLOR_LIGHT_BLUE}%Y-%m-%d %H:%M:%S${COLOR_NO_COLOUR} ")
export HISTTIMEFORMAT=${HISTTIMEFORMAT:-"%Y-%m-%d %H:%M:%S"}

# Cucumber / Autotest inte  gration
export AUTOFEATURE=${AUTOFEATURE:-"true autotest"}

# use UTF-8
setLocale()
{
  if [[ "$CONFIG_CHARSET_UTF8" == "true" ]]; then
    local i pattern localeOutput localeOutputArray line

    localeOutput=$(locale -a 2>/dev/null)
    localeOutputArray=()
    while read -r line; do
      localeOutputArray+=("$line")
    done <<< "$localeOutput"

    # check if $CONFIG_LANG isset and available
    if [ "$CONFIG_LANG" != "" ] && [ -n "$(echo $localeOutput | grep $CONFIG_LANG)" ] ; then
      pattern="${CONFIG_LANG}\.(UTF-8|UTF8|utf-8|utf8)$"
    else
      pattern=".{2,2}_.{2,2}\.(UTF-8|UTF8|utf-8|utf8)$"
    fi

    for i in "${localeOutputArray[@]}"; do
      if [[ "$i" =~ $pattern ]]; then
        export LC_ALL=${i};
        export LANG=${i};
        export LANGUAGE=${i};
        return 0;
      fi
    done
  fi

  return 1
}
setLocale

if [ $? -eq 1 ]; then
  export UTF8_LANG="0"
else
  export UTF8_LANG="1"
fi

unset -f setLocale

#tty detection
if [[ "$(tty | grep -o '/dev/tty')" == "/dev/tty" ]]; then
  export IS_TTY=1
else
  export IS_TTY=0
fi

# make less the default pager, and specify some useful defaults
less_options=(
  # If the entire text fits on one screen, just show it and quit. (Be more
  # like "cat" and less like "more".)
  --quit-if-one-screen

  # Do not clear the screen first.
  --no-init

  # Like "smartcase" in Vim: ignore case unless the search pattern is mixed.
  --ignore-case

  # Do not automatically wrap long lines.
  # This is a problem for --quit-if-one-screen if there are chopped lines
  #--chop-long-lines

  # Allow ANSI colour escapes, but no other escapes.
  --RAW-CONTROL-CHARS

  # Do not ring the bell when trying to scroll past the end of the buffer.
  --quiet

  # Do not complain when we are on a dumb terminal.
  --dumb
);
export LESS="-iMX --shift 5 ${less_options[*]}"
unset less_options

# highlight section titles in manual pages
export LESSHISTFILE="-"     # no less history file
if [ "$UID" != 0 ]; then
    export LESSCHARSET=${LESSCHARSET:-"utf-8"}

    [ -x "`which lesspipe 2>/dev/null`" ] && eval "$(lesspipe)"

    # yep, 'less' can colorize manpages
    export LESS_TERMCAP_mb=$'\E[01;31m'
    export LESS_TERMCAP_md=$'\E[01;31m'
    export LESS_TERMCAP_me=$'\E[0m'
    export LESS_TERMCAP_se=$'\E[0m'
    export LESS_TERMCAP_so=$'\E[01;44;33m'
    export LESS_TERMCAP_ue=$'\E[0m'
    export LESS_TERMCAP_us=$'\E[01;32m'
fi

# don’t clear the screen after quitting a manual page
export MANPAGER=${MANPAGER:-"less -X"}

# try to enable colored output
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# colorscheme for OS X `ls` environment variable:
export CLICOLOR=1
export LSCOLORS=${LSCOLORS:-"Gxfxcxdxbxegedabagacad"}

# "ls" default options
export LS_OPTIONS=${LS_OPTIONS:-"-hFN --color=auto"}

export GREP_COLORS=${GREP_COLORS:-"1;32"}

# colored GCC (>= v4.9) warnings and errors
export GCC_COLORS=${GCC_COLORS:-"error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"}

# lazy add local bin
LOCAL_BIN="$HOME/.local/bin"
if [ -d $LOCAL_BIN ]; then
  _append_path "$LOCAL_BIN"
fi

# lazy add chromium
if [ -f "/usr/bin/chromium" ]; then
  export CHROME_BIN="/usr/bin/chromium"
fi
if [ -f "/usr/bin/google-chrome" ]; then
  export CHROME_BIN="/usr/bin/google-chrome"
fi
if [ -f "/usr/bin/chromium-browser" ]; then
  export CHROME_BIN="/usr/bin/chromium-browser"
fi

# lazy add firefox
if [ -f "/usr/bin/firefox" ]; then
  export FIREFOX_BIN="/usr/bin/firefox"
fi

# lazy add JAVA_HOME
if [ -d "/usr/lib/jvm/java-7-openjdk" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-7-openjdk"
fi
if [ -d "/usr/lib/jvm/java-7-oracle/jre" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-7-oracle/jre"
fi
if [ -d "/usr/lib/jvm/java-7-oracle" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-7-oracle"
fi
if [ -d "/usr/lib/jvm/java-8-oracle" ]; then
  export JAVA_HOME="/usr/lib/jvm/java-8-oracle"
fi
if [ -d "/usr/lib/jvm/oraclejdk8-64" ]; then
  export JAVA_HOME="/usr/lib/jvm/oraclejdk8-64"
fi
if [ -n "$JAVA_HOME" ]; then
  export JDK_HOME=$JAVA_HOME
  export JRE_HOME=$JAVA_HOME
  _prepend_path "$JAVA_HOME/bin"
fi

# lazy add M2_HOME
if [ -d "/opt/maven" ]; then
  export M2_HOME="/opt/maven"
fi
if [ -d "/usr/share/maven" ]; then
  export M2_HOME="/usr/share/maven"
fi
if [ -n "$M2_HOME" ]; then
  _prepend_path "$M2_HOME/bin"
fi

# lazy add ANDROID_SDK_ROOT
if [ -d "/opt/android-sdk-linux/" ]; then
  export ANDROID_SDK_ROOT="/opt/android-sdk-linux/"
fi
if [ -d "/android-sdk-linux/" ]; then
  export ANDROID_SDK_ROOT="/android-sdk-linux/"
fi
if [ -n "$ANDROID_SDK_ROOT" ]; then
  export ANDROID_NDK=/opt/android-ndk/
  export ANDROID_HOME=$ANDROID_SDK_ROOT
  _prepend_path "$ANDROID_SDK_ROOT/tools/:$ANDROID_SDK_ROOT/platform-tools/"
fi
if [ -d "$HOME/Android/Sdk" ]; then
  export ANDROID_SDK=$HOME/Android/Sdk
fi
if [ -d "$HOME/Android/Sdk/platform-tools" ]; then
  _prepend_path "$HOME/Android/Sdk/platform-tools"
fi
if [ -d "$HOME/Android/Sdk/tools" ]; then
  _prepend_path "$HOME/Android/Sdk/tools"
fi

# ruby settings
#
# ruby version management with rbenv
if [ -d "$HOME/.rbenv" ]; then
  export RBENV_ROOT="$HOME/.rbenv"
  _prepend_path "$RBENV_ROOT/bin"
  eval "$(rbenv init -)"
fi

# ndenv settings
#
if [ -d "$HOME/.ndenv" ]; then
  export NDENV_HOME="$HOME/.ndenv"
  _prepend_path "$NDENV_HOME/bin"
  eval "$(ndenv init -)"
fi

# jenv settings
#
if [ -f "$HOME/.jenv/bin/jenv-init.sh" ]; then
  source $HOME/.jenv/bin/jenv-init.sh
fi

# pyenv settings
#
if [ -d "$HOME/.pyenv/bin" ]; then
  _prepend_path "$HOME/.pyenv/bin"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

# php settings
#
# composer - path
if [ -d "$HOME/AppData/Roaming/Composer/vendor/bin" ]; then
  _prepend_path "$HOME/AppData/Roaming/Composer/vendor/bin"
fi
if [ -d "$HOME/.composer/vendor/bin" ]; then
  _prepend_path "$HOME/.composer/vendor/bin"
fi

# node-js settings
#
# Enable persistent REPL history for `node`.
export NODE_REPL_HISTORY="~/.node_history"
# Allow 32³ entries; the default is 1000.
export NODE_REPL_HISTORY_SIZE="32768"
# Use sloppy mode by default, matching web browsers.
export NODE_REPL_MODE="sloppy"

# python settings
#
# Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
export PYTHONIOENCODING="UTF-8"


#####################################################################################################################################
# Custom exports
#####################################################################################################################################

is_darwin && is_zsh && {
  if [ ! -f "${ZDOTDIR}/iterm2_shell_integration.zsh" ]; then
    curl -L https://iterm2.com/shell_integration/zsh -o ${ZDOTDIR}/iterm2_shell_integration.zsh
  fi
  # see Limitations of https://iterm2.com/documentation-shell-integration.html
  if [ "$CONFIG_TERM_LOCAL" = 'tmux' ]; then
    export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=1
  fi
  source ${ZDOTDIR}/iterm2_shell_integration.zsh

  # homebrew
  if [ -d "/opt/homebrew/share/man" ]; then
    export MANPATH=/opt/homebrew/share/man:$MANPATH
  fi

  # macports https://guide.macports.org/#installing.shell
  if [ -d "/opt/local/bin" ]; then
    _prepend_path "/opt/local/bin:/opt/local/sbin"
    export MANPATH=/opt/local/share/man:$MANPATH
  fi
}

# python virtualenv + virtualenvwrapper

if virtualenv --help >/dev/null 2>&1; then
  export WORKON_HOME=~/.virtualenvs
  export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
  export VIRTUALENVWRAPPER_VIRTUALENV=$(readlink -f $(which virtualenv))
  if [ -f $HOME/.local/bin/virtualenvwrapper.sh ]; then
    source "$HOME/.local/bin/virtualenvwrapper.sh"
  elif [ -f "/opt/homebrew/bin/virtualenvwrapper.sh" ]; then
    source "/opt/homebrew/bin/virtualenvwrapper.sh"
  fi
fi

# Oracle InstantClient and cx-Oracle
_instant_client_path="/opt/oracle/instantclient_19_3"
export LD_LIBRARY_PATH="$_instant_client_path:$LD_LIBRARY_PATH"
_prepend_path "$_instant_client_path"
export ORACLE_HOME="$_instant_client_path"

# GO
export GOPATH="$HOME/go"
export GOBIN="$GOPATH/bin"
_prepend_path "/usr/local/go/bin:$GOBIN"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

if [ -d "${KREW_ROOT:-$HOME/.krew}" ]; then
  export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

unset -f _remove_path_entry
unset -f _append_path
unset -f _prepend_path
