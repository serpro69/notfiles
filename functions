#!/bin/sh
#
# File: .functions
# Description:
#   contains all functions defined by the user. Separated from shell rc files
#   for portability between different machines.
#   Avoid syntax and commands not portable to other different setups,
#   check out http://hyperpolyglot.org/unix-shells for more information.

# required to check if a command exists
command -v exists &>/dev/null || alias exists='command -v &>/dev/null'

# run command in the background
function background() {
  [[ -z "$@" ]] && return 1
  "$@" &
}

# show command help with less (if it's more than one page)
function help() {
  [[ -z "$@" ]] && return 1
  "$@" --help >/dev/null 2>&1 && "$@" --help | less -FX
}

# syntax-highlighted cat
exists highlight && {
  exists ccat || function ccat() {
    # --validate-input  remove BOM, don't parse binary files
    # --t 2             replace tabs with 2 spaces
    # -I                include css style in output file
    # -O ansi           output to std output by default
    # --failsafe        if no syntax definition, copy input to output (cat-like)
    # --quiet           suppress "unknown source file extension" error
    highlight --validate-input -t 2 -I -O ansi --failsafe --quiet "$@"
  }

  function cless() {
    ccat "$@" | less -FX
  }
  alias lesh='cless -S sh'
}

# swaps two files
function swap() {
  # Check if specified 2 files
  [[ "$#" != 2 ]] && echo "Syntax: $0 <file1> <file2> ($# files provided)" && return 1

  # Check if files specified are different
  [[ "$1" == "$2" ]] && echo "Error: files must be different" && return 1

  # Check if files specified exist and are files
  [[ -e "$1" || -e "$2" ]] || { echo "Error: at least one file must exist" && return 1 }

  # If only one file exists, just rename it. Otherwise create a temp file and swap them
  if [[ ! -e "$1" ]]; then
    command mv "$2" "$1"
  elif [[ ! -f "$2" ]]; then
    command mv "$1" "$2"
  else
    # Create a temporary file
    tmpfile=$(mktemp $(dirname "$1")/XXXXXX)
    command mv "$1" "$tmpfile" && command mv "$2" "$1" && command mv "$tmpfile" "$2"
  fi

  local ret=$?
  [ $ret -eq 0 ] && echo "$1 <-> $2"
  return $ret
}

# opens zshall man page and looks for specified argument
function zman() {
  PAGER="less -g -s '+/^       "$1"'" man zshall
}

# Use:
# apt install $(apt-depends <package> [<package> ...])
function apt-depends() {
  LANG= apt-cache depends "$@" | sed -n 's/.*Depends: //p'
}

# Reminders via system notifications
#
# Usage: remind <summary> <body> [until] <timespec>
#
# Considerations:
# - The reminder will be displayed as a system notification via notify-send program
# - The reminder will be displayed only once, unless a [date] (in "yyyy-MM-DD" format) is specified as the 3rd argument
# - If a [date] is specified, the reminder will be displayed daily at the specified [time] (in "HH:MM" format) until the [date]
function remind() {

  for arg in "$@"; do
    if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
      echo "Usage: remind <summary> <body> [until] <timespec>"
      echo
      echo "Arguments:"
      echo "  <summary>    The title of the notification."
      echo "  <body>       The body text of the notification."
      echo "  [until]      (Optional) A date in YYYY-MM-DD format for setting up a recurring reminder."
      echo "  <timespec>   The time specification for the reminder."
      echo
      echo "Considerations:"
      echo " - The reminder will be displayed as a system notification via notify-send program"
      echo " - The reminder will be displayed only once, unless a [until] (must be in 'yyyy-MM-DD' format) is specified as the 3rd argument"
      echo " - If a [until] is specified, the reminder will be displayed daily at the specified <timespec> (must be in 'hh:mm' format) until the <until> date"
      echo " - Single-time reminder accepts full range of <timespec> formats supported by 'at' command"
      echo
      echo "Examples:"
      echo "  remind 'Meeting' 'Team meeting at 10 AM' 10:00"
      echo "    - Sets a single reminder for today at 10:00 AM."
      echo
      echo "  remind 'Lunch Break' 'Take a break' 2024-12-31 12:30"
      echo "    - Sets a recurring reminder every day at 12:30 until 31st Dec 2024."
      echo
      return 0
    fi
  done

  local summary=$1
  local body=$2
  local maybe_until=$3

  # if the 3rd argument is a date in the format yyyy-MM-DD, then it's a recurring reminder
  if [[ "$maybe_until" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    local until=$maybe_until
    local at_spec="${@:4}" # 4th and onward args act as the at specification

    # convert the 'until' date to epoch format (to handle date comparison in cron)
    until_timestamp=$(date -d "$until" +%s)

    # extract HH:MM from at_spec (NB! only handles simple HH:MM format for cron jobs)
    hour=$(echo "$at_spec" | cut -d: -f1)
    minute=$(echo "$at_spec" | cut -d: -f2)

    # validate extracted hour and minute
    if [[ ! "$hour" =~ ^[0-9]{1,2}$ ]] || [[ ! "$minute" =~ ^[0-9]{1,2}$ ]] || (( hour > 23 )) || (( minute > 59 )); then
        echo "Error: Time specification for recurring reminders must be in HH:MM format."
        return 1
    fi

    local env_vars="DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${UID}/bus"

    # add the cron job for daily reminders until the specified 'until' date
    #cron_job="$minute $hour * * * if [ \$(date +\\%s) -lt $until_timestamp ]; then notify-send -u critical -t 10000 '$summary' '$body'; else crontab -l | grep -v '$summary' | crontab -; fi"
    # * * * * * if [ $(date +'\%s') -lt 1728511200 ]; then DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send 'Cron Test' 'This is a test from cron'; else DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send 'Cron Test Else' 'This is a test from cron'; fi
    # * * * * * if [ $(date +'\%s') -lt 1728511200 ]; then DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send 'Cron Test' 'This is a test from cron'; else DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send 'Cron Test Else' 'This is a test from cron'; fi
    cron_job="${minute} ${hour} * * * if [ \$(date +'\\%s') -lt ${until_timestamp} ]; then DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send '${summary}' '${body}'; else crontab -l | grep -v \"notify-send '${summary}' '${body}'\" | crontab - && DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send 'removed cron reminder' '${summary} : ${body}'; fi"

    # add the cron job to the user's crontab (preserve existing jobs)
    (crontab -l 2>/dev/null; echo "$cron_job") | crontab -

    echo "Daily reminder set at $hour:$minute until $until"
  else
    # if the 3rd argument is not a valid date, treat it as part of the at_spec
    local at_spec="${@:3}"  # Use 3rd and onward arguments as the at specification
    # use 'at' to schedule the notification at the specified time
    echo "notify-send -u critical -t 10000 '$summary' '$body'" | at "$at_spec"
    echo "One-time reminder set for: $at_spec"
  fi
}

# fuzzy history
function fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# hashicorp vault
function vl() {
  if [[ $# -eq 0 ]]; then
    echo "\e[01;31mError: missing username argument. Run with --help for usage details\e[0m" >&2
    return 1
  elif [[ "$*" == *"--help"* ]]; then
    echo "Runs vault login with ldap method and a given username"
    echo "Usage: vl <username>" >&2
    return 0
  fi
  unset VAULT_TOKEN
  vault login -method=ldap username="$1"
  export VAULT_TOKEN=$(vault print token)
}

# similar to 'lzd' alias, but uses a docker context to run against a remote host
# used only against elhub contexts for now
# shellcheck disable=SC2112
lzdc() {
  if [[ $# -eq 0 ]]; then
    echo "\e[01;31mError: missing docker context name. Run with --help for usage details\e[0m" >&2
    return 1
  elif [[ "$*" == *"--help"* ]]; then
    echo "Runs lazydocker on a docker context host"
    echo "Usage: lzdc <context-name>" >&2
    return 0
  fi
  docker --context "$1" run --rm -it \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /home/sergeip/.lazydocker/config:/.config/jesseduffield/lazydocker \
    docker.jfrog.elhub.cloud/lazyteam/lazydocker
}


## ZSH TESTING FUNCTIONS

zsh_docker_versions() {
  local image=${1:-zshusers/zsh}
  wget -qO- https://registry.hub.docker.com/v1/repositories/${image}/tags \
    | command sed 's/[^0-9.]*"name": "\([^"]*\)"[^0-9.]*/\n\1\n/g;s/^\n//'
}

zsh_refresh_docker() {
  local version
  local image=${1:-ohmyzsh/zsh}
  zsh_docker_versions "$image" | while read version; do
    docker pull "$image:$version"
  done
}

zsh_test_versions() {
  local -A opts
  zparseopts -D -E -A opts - -image:=image -glob:=glob

  local image=${opts[--image]:-ohmyzsh/zsh}
  local glob=${opts[--glob]:-*}

  local input
  case "$1" in
  -) input="$(</dev/stdin)" ;;
  esac

  local version
  command docker images -f "reference=$image:$glob" --format='{{.Tag}}' \
    | tail +1 | sort -V | while read version; do
    if (( $#input )); then
      printf '\e[1;34m%s\e[0m\n' "$version: "
      command docker run -i "$image:$version" zsh -dfis <<< "$input"
      printf '\r\e[2K' # clear last line of output (empty zsh prompt)
    else
      printf '\e[1;34m%s\e[0m' "$version: "
      command docker run "$image:$version" zsh -c "$@"
    fi

    sleep 0.2
  done
}
